install.packages(c("devtools", "ggstatsplot", "systemfonts"))
rm(list = ls())
gc()
library(data.table)
library(ggplot2)
library(stringr)
library(extrafont)
library(colorspace)
euroleague_basketball <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-10-07/euroleague_basketball.csv')
View(euroleague_basketball)
rm(list = ls()); gc()
# Libraries ------
library(data.table)
library(ggplot2)
library(stringr)
library(extrafont)
library(colorspace)
# load data ------
euroleague_basketball <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-10-07/euroleague_basketball.csv')
dt <- as.data.table(euroleague_basketball)
# -----------------------
# Helper: explode comma/semicolon lists into long (Team, Year)
# -----------------------
explode_years_simple <- function(vec, team_vec) {
res <- data.table(Team = character(), Year = integer())
for (i in seq_along(vec)) {
x <- vec[[i]]
if (is.na(x) || x == "") next
# split on comma/semicolon/pipe
parts <- str_split(as.character(x), pattern = "[,;|/]")[[1]]
parts <- str_trim(parts)
# expand ranges like 1998-2000
expand_one <- function(p) {
if (is.na(p) || p == "") return(NULL)
if (str_detect(p, "-")) {
b <- as.integer(str_split(p, "-")[[1]])
if (length(b) == 2 && !any(is.na(b))) return(seq(b[1], b[2]))
}
y <- str_extract(p, "\\d{4}")
if (!is.na(y)) return(as.integer(y))
return(NULL)
}
years <- unique(unlist(lapply(parts, expand_one)))
if (length(years)) {
res <- rbind(res, data.table(Team = rep(team_vec[i], length(years)), Year = years))
}
}
res[, Year := as.integer(Year)]
res
}
# -----------------------
# Detect likely columns (adjust if your column names are different)
# -----------------------
team_col <- names(dt)[str_detect(names(dt), regex("^team$|Team|team_name", ignore_case = TRUE))][1]
final_col <- names(dt)[str_detect(names(dt), regex("Final|final|FinalFour|final_four", ignore_case = TRUE))][1]
title_col <- names(dt)[str_detect(names(dt), regex("Title|title|Champ|champion|Winner", ignore_case = TRUE))][1]
if (is.na(team_col) || is.null(team_col)) stop("Couldn't find Team column. Rename it to 'Team' or similar.")
message("Using team column: ", team_col, "; final: ", final_col, "; title: ", title_col)
teams <- dt[[team_col]]
ff_dt <- if (!is.na(final_col) && !is.null(final_col)) explode_years_simple(dt[[final_col]], teams) else data.table()
title_dt <- if (!is.na(title_col) && !is.null(title_col)) explode_years_simple(dt[[title_col]], teams) else data.table()
# keep consistent team ordering (by total titles, then name)
if (nrow(title_dt) > 0) {
order_vec <- title_dt[, .N, by = Team][order(-N)]$Team
order_vec <- unique(c(order_vec, unique(teams)))
} else {
order_vec <- sort(unique(teams))
}
ff_dt[, Team := factor(Team, levels = rev(order_vec))]   # reverse so top team appears at top of plot
title_dt[, Team := factor(Team, levels = rev(order_vec))]
# -----------------------
# Make short horizontal segments centered on each Year for Final Four
# -----------------------
seg_half_width <- 0.35  # half-length (years) of each segment
# create start/end for geom_segment
ff_dt[, `:=`(x = Year - seg_half_width, xend = Year + seg_half_width, y = as.numeric(Team) , yend = as.numeric(Team))]
# title points: y position aligned with team numeric
title_dt[, y := as.numeric(factor(Team, levels = levels(ff_dt$Team)))]
# -----------------------
# Plot: segments for Final Four + points for Titles
# -----------------------
p <- ggplot() +
geom_segment(data = ff_dt, aes(x = x, xend = xend, y = Team, yend = Team),
size = 6, color = "grey85", lineend = "round") +        # thick pale bar per Final Four year
geom_point(data = title_dt, aes(x = Year, y = Team, color = "Title"), size = 3.2) +  # colored point for title
scale_color_manual("", values = c("Title" = "#D94E67")) +
scale_x_continuous(breaks = seq(min(ff_dt$Year, title_dt$Year, na.rm = TRUE),
max(ff_dt$Year, title_dt$Year, na.rm = TRUE), by = 2),
expand = expansion(mult = c(0.01, 0.01))) +
labs(title = "Euroleague timeline â€” Final Four (segments) and Titles (points)",
subtitle = "Thick pale segment = Final Four appearance in that year; colored dot = Title win",
x = "Year", y = NULL,
caption = "Source: EuroleagueBasketball dataset") +
theme_minimal(base_size = 12) +
theme(panel.grid.major.y = element_blank(),
axis.text.y = element_text(size = 9),
legend.position = "bottom")
euroleague_basketball
rm(list = ls())
gc()
euroleague_basketball <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-10-07/euroleague_basketball.csv')
df1 <- euroleague_basketball[, .(Team, FinalFour_Appearances, Titles_Won, Years_of_FinalFour_Appearances, Years_of_Titles_Won)]
View(df1)
df1 <- euroleague_basketball[, .(Team, FinalFour_Appearances, Titles_Won, Years_of_FinalFour_Appearances, Years_of_Titles_Won)]
df1
df <- as.data.table(euroleague_basketball)[, .(Team,
Years_of_FinalFour_Appearances,
Years_of_Titles_Won,
FinalFour_Appearances,
Titles_Won)]
# small helper to turn "1999, 2001-2003" etc into long table
explode <- function(vec, teams) {
out <- data.table(Team = character(), Year = integer())
for (i in seq_along(vec)) {
v <- vec[[i]]
if (is.na(v) || v == "" || tolower(v) %in% c("none", "na")) next
parts <- str_split(as.character(v), "[,;|/]")[[1]] |> str_trim()
years <- integer()
for (p in parts) {
if (p == "" || is.na(p)) next
if (str_detect(p, "-")) {
bounds <- as.integer(str_split(p, "-", n = 2)[[1]])
if (!any(is.na(bounds))) years <- c(years, seq(bounds[1], bounds[2]))
} else {
y <- str_extract(p, "\\d{4}")
if (!is.na(y)) years <- c(years, as.integer(y))
}
}
years <- unique(years)
if (length(years)) out <- rbind(out, data.table(Team = rep(teams[i], length(years)), Year = years))
}
out[, Year := as.integer(Year)]
out
}
teams <- df$Team
ff_dt    <- explode(df$Years_of_FinalFour_Appearances, teams)
title_dt <- explode(df$Years_of_Titles_Won, teams)
# order teams by Titles_Won desc then name (so best teams on top)
order_vec <- df[, .(Team, Titles_Won)][order(-Titles_Won, Team)]$Team
order_vec <- rev(order_vec)   # reverse so highest appears at top in plot
ff_dt[, Team := factor(Team, levels = order_vec)]
title_dt[, Team := factor(Team, levels = order_vec)]
# segment width in years
half_w <- 0.3
if (nrow(ff_dt)) ff_dt[, `:=`(x = Year - half_w, xend = Year + half_w)]
# plot (very compact)
ggplot() +
geom_segment(data = ff_dt, aes(x = x, xend = xend, y = Team, yend = Team),
size = 6, color = "grey88", lineend = "round") +
geom_point(data = title_dt, aes(x = Year, y = Team),
shape = 15, size = 3, color = "#D94E67") +
scale_x_continuous(breaks = function(x) seq(floor(min(x, na.rm = TRUE)),
ceiling(max(x, na.rm = TRUE)), by = 2),
expand = expansion(mult = c(0.01,0.01))) +
labs(title = "Final Four appearances (segments) and Titles (squares)",
x = "Year", y = NULL, caption = "Source: euroleague_basketball") +
theme_minimal(base_family = "Candara") +
theme(legend.position = "none",
panel.grid.major.y = element_blank(),
plot.title = element_text(hjust = 0.5, face = "bold"))
df1
df1 <- euroleague_basketball[, .(Team, FinalFour_Appearances, Titles_Won, Years_of_FinalFour_Appearances, Years_of_Titles_Won)]
df1
View(ff_dt)
View(euroleague_basketball)
View(title_dt)
View(ff_dt)
rm(list = ls())
gc()
euroleague_basketball <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-10-07/euroleague_basketball.csv')
df1 <- euroleague_basketball[, .(Team, FinalFour_Appearances, Titles_Won, Years_of_FinalFour_Appearances, Years_of_Titles_Won)]
# Separate Final Four years
finalfour_long <- df1[, .(
Year = unlist(str_split(Years_of_FinalFour_Appearances, ",\\s*")),
Status = "Final Four"
), by = Team]
View(finalfour_long)
# Separate Title years
titles_long <- df1[, .(
Year = unlist(str_split(Years_of_Titles_Won, ",\\s*")),
Status = "Champion"
), by = Team]
View(titles_long)
# Separate Final Four years
finalfour_long <- df1[, .(
Year_FF = unlist(str_split(Years_of_FinalFour_Appearances, ",\\s*")),
Year_W = unlist(str_split(Years_of_Titles_Won, ",\\s*"))
), by = Team]
df1 <- euroleague_basketball[, .(Team, FinalFour_Appearances, Titles_Won, Years_of_FinalFour_Appearances, Years_of_Titles_Won)]
# Separate Final Four years
finalfour_long <- df1[, .(
Year_FF = unlist(str_split(Years_of_FinalFour_Appearances, ",\\s*")),
Year_W = unlist(str_split(Years_of_Titles_Won, ",\\s*"))
), by = Team]
df_long <- rbind(finalfour_long, titles_long, fill = TRUE)
View(df_long)
# Separate Final Four years
finalfour_long <- df1[, .(
Year = unlist(str_split(Years_of_FinalFour_Appearances, ",\\s*")),
Status = "Final Four"
), by = Team]
# Separate Title years
titles_long <- df1[, .(
Year = unlist(str_split(Years_of_Titles_Won, ",\\s*")),
Status = "Champion"
), by = Team]
df_long <- rbind(finalfour_long, titles_long, fill = TRUE)
df_long
View(df_long)
df_long$Year <- is.na(df_long$Year)
df_long <- rbind(finalfour_long, titles_long, fill = TRUE)
which(is.na(df_long$Year))
index <- which(!is.na(df_long$Year))
df_long <- df_long[index]
df_long
df_long <- rbind(finalfour_long, titles_long, fill = TRUE)
df_long <- df_long[Year != ""]
df_long[, Year := as.integer(Year)]
df_long[, Year := as.integer(Year)]
df_long <- rbind(finalfour_long, titles_long, fill = TRUE)
df_long <- df_long[Year != ""]
df_long[, Year := as.integer(Year)]
View(df_long)
df_long <- rbind(finalfour_long, titles_long, fill = TRUE)
df_long <- df_long[Year != ""]
df1 <- euroleague_basketball[, .(Team, FinalFour_Appearances, Titles_Won, Years_of_FinalFour_Appearances, Years_of_Titles_Won)]
# Separate Final Four years
finalfour_long <- df1[, .(
Year = unlist(str_split(Years_of_FinalFour_Appearances, ",\\s*")),
Status = "Final Four"
), by = Team]
# Separate Title years
titles_long <- df1[, .(
Year = unlist(str_split(Years_of_Titles_Won, ",\\s*")),
Status = "Champion"
), by = Team]
View(titles_long)
View(df1)
df_long <- rbind(finalfour_long, titles_long, fill = TRUE)
df_long$Year <- ifelse(df_long$Year == "None", "", df_long$Year)
df_long <- df_long[Year != ""]
df_long[, Year := as.integer(Year)]
View(df_long)
# make sure Team is a factor and ordered by number of Titles (optional)
team_order <- df_long[Status == "Champion", .N, by = Team][order(-N)]$Team
team_order <- unique(c(team_order, df_long$Team))
df_long[, Team := factor(Team, levels = rev(team_order))]  # rev so top appears at top
# plot
ggplot(df_long, aes(x = Year, y = Team, color = Status)) +
geom_point(size = 3) +
scale_color_manual(values = c("Final Four" = "grey70", "Champion" = "#D94E67")) +
labs(title = "Euroleague: Final Four appearances and Titles",
x = "Year", y = NULL, color = "") +
theme_minimal(base_family = "Candara") +
theme(
axis.text.y = element_text(size = 9),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "top"
)
# plot
ggplot(df_long, aes(x = Year, y = Team, color = Status)) +
geom_point(size = 3) +
scale_color_manual(values = c("Final Four" = "grey70", "Champion" = "#D94E67")) +
labs(title = "Euroleague: Final Four appearances and Titles",
x = "Year", y = NULL, color = "") +
theme_minimal() +
theme(
axis.text.y = element_text(size = 9),
plot.title = element_text(hjust = 0.5, face = "bold"),
legend.position = "top"
)
team_order
View(euroleague_basketball)
