rm(list = ls())
gc()
library(data.table)
library(stringr)
library(ggplot2)
library(extrafont)
library(ggtext)
library(ggstream)
monsters <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-05-27/monsters.csv')
df <- monsters[, .(name, hp_number, ac, initiative, str,dex,con, int, cha)]
df <- df[complete.cases(df)]
df1 <- df[, 2:ncol(df)] |>
setDF(rownames = df$name)
View(df1)
res.pca <- prcomp(df1, scale = TRUE, center = TRUE)
summary(res.pca)
prop_var <- summary(res.pca)$importance[2, ]  # Extract Proportion of Variance
pc1_label <- paste0("PC1 (", round(prop_var[1] * 100, 2), "%)")
pc2_label <- paste0("PC2 (", round(prop_var[2] * 100, 2), "%)")
df <- df[, 2:ncol(df)] |>
setDF(rownames = df$name)
res.pca <- prcomp(df, scale = TRUE, center = TRUE)
df1 = res.pca$x |> as.data.frame() |> setDT(keep.rownames = "name")
View(df1)
df1 = df1[, 1:3]
View(monsters)
monsters$alignment |> unique()
monsters$type |> unique()
monsters$size |> unique()
View(df1)
df1$Group = monsters$alignment
summary(res.pca)
prop_var <- summary(res.pca)$importance[2, ]  # Extract Proportion of Variance
pc1_label <- paste0("PC1 (", round(prop_var[1] * 100, 2), "%)")
pc2_label <- paste0("PC2 (", round(prop_var[2] * 100, 2), "%)")
gr = ggplot(df1, aes(PC1, PC2)) +
geom_mark_ellipse(aes(fill = Group, label = Group), alpha = .1, expand = unit(2, "mm")) +
geom_point(aes(fill = Group), shape = 21, size = 3, stroke = .25, color = "white") +
# geom_text(aes(label = Sample), size = 2) +
scale_fill_manual(
values = c(
"M_CLL" = "#a62a17",
"U_CLL" = "#3a5cbc"
)
) +
scale_x_continuous(limits = c(-20, 55)) +
scale_y_continuous(limits = c(-20, 25)) +
theme_minimal() +
theme(
legend.position = "none",
plot.margin = margin(20, 20, 20, 20)
) +
labs(x = pc1_label, y = pc2_label)
library(ggstream)
library(data.table)
library(stringr)
library(ggplot2)
library(extrafont)
library(ggtext)
library(ggstream)
ggplot(df1, aes(PC1, PC2)) +
geom_mark_ellipse(aes(fill = Group, label = Group), alpha = .1, expand = unit(2, "mm")) +
geom_point(aes(fill = Group), shape = 21, size = 3, stroke = .25, color = "white")
?geom_mark_ellipse
?geom_mark_ellipse()
??geom_mark_ellipse
library(ggforce)
gr = ggplot(df1, aes(PC1, PC2)) +
geom_mark_ellipse(aes(fill = Group, label = Group), alpha = .1, expand = unit(2, "mm")) +
geom_point(aes(fill = Group), shape = 21, size = 3, stroke = .25, color = "white") +
# geom_text(aes(label = Sample), size = 2) +
# scale_fill_manual(
#     values = c(
#         "M_CLL" = "#a62a17",
#         "U_CLL" = "#3a5cbc"
#
#     )
# ) +
#
scale_x_continuous(limits = c(-20, 55)) +
scale_y_continuous(limits = c(-20, 25)) +
theme_minimal() +
theme(
legend.position = "none",
plot.margin = margin(20, 20, 20, 20)
) +
labs(x = pc1_label, y = pc2_label)
gr
# Add hp_number to df1 for filtering
df1[, hp_number := monsters$hp_number]
# Filter top 10 highest HP monsters for labeling
top_hp <- df1[order(-hp_number)][1:10]
gr = ggplot(df1, aes(PC1, PC2)) +
geom_mark_ellipse(aes(fill = Group, label = Group), alpha = 0.1, expand = unit(2, "mm")) +
geom_point(aes(fill = Group), shape = 21, size = 3, stroke = 0.25, color = "white") +
geom_text(data = top_hp, aes(label = name), size = 3, vjust = -1) +
theme_minimal() +
theme(legend.position = "none") +
labs(x = pc1_label, y = pc2_label)
gr
top_hp
df <- monsters[, .(name, hp_number, ac, initiative, str,dex,con, int, cha)]
df <- df[complete.cases(df)]
# Filter top 10 highest HP monsters for labeling
df <- df[order(-hp_number)][1:30]
df <- df[, 2:ncol(df)] |>
setDF(rownames = df$name)
res.pca <- prcomp(df, scale = TRUE, center = TRUE)
df1 = res.pca$x |> as.data.frame() |> setDT(keep.rownames = "name")
df1 = df1[, 1:3]
df1$Group = monsters$alignment
summary(res.pca)
View(df)
prop_var <- summary(res.pca)$importance[2, ]  # Extract Proportion of Variance
pc1_label <- paste0("PC1 (", round(prop_var[1] * 100, 2), "%)")
pc2_label <- paste0("PC2 (", round(prop_var[2] * 100, 2), "%)")
gr = ggplot(df1, aes(PC1, PC2)) +
geom_mark_ellipse(aes(fill = Group, label = Group), alpha = .1, expand = unit(2, "mm")) +
geom_point(aes(fill = Group), shape = 21, size = 3, stroke = .25, color = "white") +
# geom_text(aes(label = Sample), size = 2) +
# scale_fill_manual(
#     values = c(
#         "M_CLL" = "#a62a17",
#         "U_CLL" = "#3a5cbc"
#
#     )
# ) +
#
scale_x_continuous(limits = c(-20, 55)) +
scale_y_continuous(limits = c(-20, 25)) +
theme_minimal() +
theme(
legend.position = "none",
plot.margin = margin(20, 20, 20, 20)
) +
labs(x = pc1_label, y = pc2_label)
gr
df1$Group = monsters[order(-hp_number)][1:30]$alignment
View(df1)
summary(res.pca)
prop_var <- summary(res.pca)$importance[2, ]  # Extract Proportion of Variance
pc1_label <- paste0("PC1 (", round(prop_var[1] * 100, 2), "%)")
pc2_label <- paste0("PC2 (", round(prop_var[2] * 100, 2), "%)")
gr = ggplot(df1, aes(PC1, PC2)) +
geom_mark_ellipse(aes(fill = Group, label = Group), alpha = .1, expand = unit(2, "mm")) +
geom_point(aes(fill = Group), shape = 21, size = 3, stroke = .25, color = "white") +
# geom_text(aes(label = Sample), size = 2) +
# scale_fill_manual(
#     values = c(
#         "M_CLL" = "#a62a17",
#         "U_CLL" = "#3a5cbc"
#
#     )
# ) +
#
scale_x_continuous(limits = c(-20, 55)) +
scale_y_continuous(limits = c(-20, 25)) +
theme_minimal() +
theme(
legend.position = "none",
plot.margin = margin(20, 20, 20, 20)
) +
labs(x = pc1_label, y = pc2_label)
gr
rm(list = ls())
gc()
# load libraries -------
library(data.table)
library(stringr)
library(ggplot2)
library(extrafont)
library(ggtext)
library(ggstream)
library(ggforce)
# load data ------
monsters <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-05-27/monsters.csv')
# clean data ------
df <- monsters[, .(name, hp_number, ac, initiative, str,dex,con, int, cha)]
df <- df[complete.cases(df)]
# Filter top 10 highest HP monsters for labeling
df <- df[order(-hp_number)][1:20]
df <- df[, 2:ncol(df)] |>
setDF(rownames = df$name)
# pca --------
res.pca <- prcomp(df, scale = TRUE, center = TRUE)
df1 = res.pca$x |> as.data.frame() |> setDT(keep.rownames = "name")
df1 = df1[, 1:3]
df1$Group = monsters[order(-hp_number)][1:20]$alignment
summary(res.pca)
prop_var <- summary(res.pca)$importance[2, ]  # Extract Proportion of Variance
pc1_label <- paste0("PC1 (", round(prop_var[1] * 100, 2), "%)")
pc2_label <- paste0("PC2 (", round(prop_var[2] * 100, 2), "%)")
gr = ggplot(df1, aes(PC1, PC2)) +
geom_mark_ellipse(aes(fill = Group, label = Group), alpha = .1, expand = unit(2, "mm")) +
geom_point(aes(fill = Group), shape = 21, size = 3, stroke = .25, color = "white") +
# geom_text(aes(label = Sample), size = 2) +
# scale_fill_manual(
#     values = c(
#         "M_CLL" = "#a62a17",
#         "U_CLL" = "#3a5cbc"
#
#     )
# ) +
#
scale_x_continuous(limits = c(-20, 55)) +
scale_y_continuous(limits = c(-20, 25)) +
theme_minimal() +
theme(
legend.position = "none",
plot.margin = margin(20, 20, 20, 20)
) +
labs(x = pc1_label, y = pc2_label)
gr
df <- monsters[, .(name, hp_number, ac, initiative, str,dex,con, int, cha)]
df <- df[complete.cases(df)]
df <- df[hp_number > 200]
df <- df[hp_number > 250]
View(df)
# Prepare data for heatmap: melt to long format
df_long <- melt(df, id.vars = "name")
ggplot(df_long, aes(x = variable, y = name, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
monsters <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-05-27/monsters.csv')
monsters <- monsters[hp_number > 250]
df <- monsters[, .(name, ac, initiative, str,dex,con, int, cha)]
df <- df[complete.cases(df)]
# Prepare data for heatmap: melt to long format
df_long <- melt(df, id.vars = "name")
ggplot(df_long, aes(x = variable, y = name, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
ggplot(df_long, aes(x = variable, y = name, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
coord_polar(theta = "x") +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
ggplot(df_long, aes(x = variable, y = name, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
coord_polar() +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
df_long = df |> transpose(make.names = "name", keep.names = "values")
View(df_long)
ggplot(df_long, aes(x = name, y = values, fill = values)) +
geom_tile() +
scale_fill_viridis_c() +
coord_polar() +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
# Prepare data for heatmap: melt to long format
df_long <- melt(df, id.vars = "name")
View(df_long)
ggplot(df_long, aes(x = name, y = value, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
coord_polar() +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
ggplot(df_long, aes(x = name, y = value, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
# coord_polar() +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
ggplot(df_long, aes(x = variable, y = name, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
# coord_polar() +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
ggplot(df_long, aes(x = name, y = variable, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
# coord_polar() +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
ggplot(df_long, aes(x = name, y = variable, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
coord_polar() +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
ggplot(df_long, aes(x = name, y = variable, fill = value)) +
geom_tile() +
scale_fill_viridis_c() +
# coord_polar() +
theme_minimal() +
labs(x = "Stat", y = "Monster", fill = "Value") +
theme(axis.text.y = element_text(size = 4))
library(ggplot2)
library(data.table)
df <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-05-27/monsters.csv')
df_clean <- df[complete.cases(df), .(alignment, hp_number)]
ggplot(df_clean, aes(x = alignment, y = hp_number, fill = alignment)) +
geom_boxplot(alpha = 0.7) +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "HP Number Distribution by Monster Alignment",
x = "Alignment",
y = "HP Number")
View(df_clean)
df <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-05-27/monsters.csv')
df_clean <- df[complete.cases(df), .(alignment, hp_number)]
df_clean <- df[, .(alignment, hp_number)]
ggplot(df_clean, aes(x = alignment, y = hp_number, fill = alignment)) +
geom_boxplot(alpha = 0.7) +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "HP Number Distribution by Monster Alignment",
x = "Alignment",
y = "HP Number")
ggplot(df_clean, aes(x = alignment, y = hp_number, fill = alignment)) +
# geom_boxplot(alpha = 0.7) +
geom_point() +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "HP Number Distribution by Monster Alignment",
x = "Alignment",
y = "HP Number")
ggplot(df_clean, aes(x = alignment, y = hp_number, fill = alignment)) +
# geom_boxplot(alpha = 0.7) +
geom_jitter() +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "HP Number Distribution by Monster Alignment",
x = "Alignment",
y = "HP Number")
ggplot(df_clean, aes(x = alignment, y = hp_number, fill = alignment)) +
# geom_boxplot(alpha = 0.7) +
geom_jitter(width = 0.1, height = 0.2) +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "HP Number Distribution by Monster Alignment",
x = "Alignment",
y = "HP Number")
ggplot(df_clean, aes(x = alignment, y = hp_number, fill = alignment)) +
# geom_boxplot(alpha = 0.7) +
geom_jitter(size = 2, width = 0.1, height = 0.2) +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "HP Number Distribution by Monster Alignment",
x = "Alignment",
y = "HP Number")
ggplot(df_clean, aes(x = alignment, y = hp_number)) +
# geom_boxplot(alpha = 0.7) +
geom_jitter(aes(fill = alignment), size = 2, width = 0.1, height = 0.2) +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "HP Number Distribution by Monster Alignment",
x = "Alignment",
y = "HP Number")
ggplot(df_clean, aes(x = alignment, y = hp_number)) +
# geom_boxplot(alpha = 0.7) +
geom_jitter(aes(color = alignment), size = 2, width = 0.1, height = 0.2) +
theme_minimal() +
theme(legend.position = "none") +
labs(title = "HP Number Distribution by Monster Alignment",
x = "Alignment",
y = "HP Number")
ggplot(df_clean, aes(x = hp_number, fill = alignment)) +
geom_histogram(bins = 30, alpha = 0.7) +
facet_wrap(~ alignment, scales = "free_y") +
theme_minimal() +
labs(title = "HP Number Distribution per Alignment",
x = "HP Number", y = "Count")
library(tidyr)
library(ggplot2)
df_stat_avg <- df[, .(hp_number, ac, initiative, str, dex, con, int, cha, alignment)]
df_stat_avg <- df_stat_avg[complete.cases(df_stat_avg)]
df_melted <- df_stat_avg |>
as.data.table() |>
melt(id.vars = "alignment", variable.name = "Stat") |>
.[, .(value = mean(value, na.rm = TRUE)), by = .(alignment, Stat)]
library(tidyr)
library(ggplot2)
df_stat_avg <- df[, .(hp_number, ac, initiative, str, dex, con, int, cha, alignment)]
df_stat_avg <- df_stat_avg[complete.cases(df_stat_avg)]
df_melted <- df_stat_avg |>
as.data.table() |>
melt(id.vars = "alignment", variable.name = "Stat") |>
.[, .(value = mean(value, na.rm = TRUE)), by = .(alignment, Stat)]
library(data.table)
library(ggplot2)
# Filter complete cases
df_stat_avg <- df[, .(alignment, hp_number, ac, initiative, str, dex, con, int, cha)]
df_stat_avg <- df_stat_avg[complete.cases(df_stat_avg)]
# Melt and compute mean per group
df_melted <- melt(df_stat_avg, id.vars = "alignment", variable.name = "Stat")
df_melted <- df_melted[, .(value = mean(value, na.rm = TRUE)), by = .(alignment, Stat)]
# Plot heatmap
ggplot(df_melted, aes(x = Stat, y = alignment, fill = value)) +
geom_tile(color = "white") +
scale_fill_viridis_c() +
theme_minimal(base_size = 14) +
labs(title = "Average Monster Stats by Alignment", x = "Stat", y = "Alignment")
