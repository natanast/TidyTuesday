palms_long <- melt(palmtrees,
id.vars = "palm_subfamily",
measure.vars = c("climbing", "erect", "acaulescent"),
variable.name = "growth_form",
value.name = "presence")
palms_long
# Count occurrences per subfamily and growth form
summary_table <- palms_long[, .N, by = .(palm_subfamily, growth_form, presence)]
# Filter only "yes" responses
summary_table <- summary_table[presence == "yes"]
# Count occurrences per subfamily and growth form
summary_table <- palms_long[, .N, by = .(palm_subfamily, growth_form, presence)]
# Create stacked bar plot
ggplot(summary_table, aes(x = palm_subfamily, y = N, fill = growth_form)) +
geom_bar(stat = "identity", position = "stack") +
labs(
title = "Distribution of Palm Growth Forms Across Subfamilies",
x = "Palm Subfamily",
y = "Count of Species",
fill = "Growth Form"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
View(palms_long)
# Remove 'both' or NA values (optional)
palms_long <- palms_long[presence %in% c("both")]
# Melt data to long format for plotting
palms_long <- melt(palmtrees,
id.vars = "palm_subfamily",
measure.vars = c("climbing", "erect", "acaulescent"),
variable.name = "growth_form",
value.name = "presence")
View(palms_long)
library(treemapify)
install.packages("treemapify")
library(plotly)
library(treemapify)
# Create treemap
ggplot(palmtrees, aes(area = 1, fill = palm_subfamily, subgroup = palm_tribe, label = spec_name)) +
geom_treemap() +
geom_treemap_subgroup_border() +  # Borders for tribes
geom_treemap_subgroup_text(place = "top", grow = T, alpha = 0.5, colour = "white", fontface = "italic") +
geom_treemap_text(fontface = "bold", colour = "black", size = 2) +
labs(title = "Palm Species Distribution by Tribe and Subfamily") +
theme_minimal()
ggplot(palmtrees, aes(area = 1, fill = palm_subfamily, subgroup = palm_tribe, label = spec_name))
ggplot(palmtrees, aes(area = 1, fill = palm_subfamily, subgroup = palm_tribe, label = spec_name)) +
geom_treemap()
palmtrees$acc_species |> unique() |> length()
palmtrees$palm_tribe |> unique() |> length()
palmtrees$palm_subfamily |> unique() |> length()
rm(list = ls())
gc()
palmtrees <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-18/palmtrees.csv')
# Convert to factors (if not already)
palmtrees[, `:=`(climbing = factor(climbing),
erect = factor(erect),
acaulescent = factor(acaulescent))]
View(palmtrees)
# Count species per subfamily
subfamily_counts <- palms[, .N, by = palm_subfamily]
View(palmtrees)
palms <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-18/palmtrees.csv')
# Count species per subfamily
subfamily_counts <- palms[, .N, by = palm_subfamily]
# Convert counts to proportions (so the waffle chart fits nicely)
waffle_data <- round(subfamily_counts$N / sum(subfamily_counts$N) * 100)
# Create named vector for waffle plot
waffle_vector <- setNames(waffle_data, subfamily_counts$palm_subfamily)
# Define colors
subfamily_colors <- RColorBrewer::brewer.pal(length(waffle_vector), "Set3")
# Create waffle chart
waffle(waffle_vector, rows = 10, colors = subfamily_colors, title = "Palm Species Distribution by Subfamily")
# Load libraries
library(waffle)
# Create waffle chart
waffle(waffle_vector, rows = 10, colors = subfamily_colors, title = "Palm Species Distribution by Subfamily")
# plot --------
# Count species per tribe
tribe_counts <- palms[, .N, by = palm_tribe]
# Convert counts to proportions
waffle_data_tribe <- round(tribe_counts$N / sum(tribe_counts$N) * 100)
# Create named vector
waffle_vector_tribe <- setNames(waffle_data_tribe, tribe_counts$palm_tribe)
# Define colors
tribe_colors <- RColorBrewer::brewer.pal(length(waffle_vector_tribe), "Paired")
# Create waffle chart
waffle(waffle_vector_tribe, rows = 10, colors = tribe_colors, title = "Palm Species Distribution by Tribe")
tribe_counts
# Define colors
tribe_colors <- RColorBrewer::brewer.pal(length(waffle_vector_tribe), "Paired")
# Create waffle chart
waffle(waffle_vector_tribe, rows = 10, title = "Palm Species Distribution by Tribe")
waffle_vector_tribe
# Generate a dynamic color palette based on the number of unique tribes
tribe_colors <- colorRampPalette(RColorBrewer::brewer.pal(12, "Paired"))(length(waffle_vector_tribe))
# Create waffle chart
waffle(waffle_vector_tribe, rows = 10, colors = tribe_colors, title = "Palm Species Distribution by Tribe")
# Create waffle chart
waffle(waffle_vector, rows = 10, colors = subfamily_colors, title = "Palm Species Distribution by Subfamily")
library(ggwaffle)
install.packages("ggwaffle")
library(waffle)
# Prepare data for ggwaffle
waffle_df <- palms %>%
count(palm_tribe) %>%
arrange(desc(n)) %>%
mutate(tribe = factor(palm_tribe, levels = rev(unique(palm_tribe)))) %>%
filter(n > 10) # Show only larger tribes for clarity
library(dplyr)
# Prepare data for ggwaffle
waffle_df <- palms %>%
count(palm_tribe) %>%
arrange(desc(n)) %>%
mutate(tribe = factor(palm_tribe, levels = rev(unique(palm_tribe)))) %>%
filter(n > 10) # Show only larger tribes for clarity
# Plot waffle chart per tribe
ggwaffle(waffle_df, aes(fill = tribe), rows = 10) +
scale_fill_viridis_d() +
theme_minimal() +
labs(title = "Palm Species Distribution by Tribe", fill = "Palm Tribe")
waffle_df
# Plot waffle chart per tribe
ggplot(waffle_df, aes(fill=palm_tribe, values=n)) +
geom_waffle() +
theme_void()
# Plot waffle chart per tribe
ggplot(waffle_df, aes(fill=palm_tribe, values=n)) +
geom_waffle() +
facet_wrap(~group, ncol=1) +
theme_void()
# Plot waffle chart per tribe
ggplot(waffle_df, aes(fill=palm_tribe, values=n)) +
geom_waffle() +
facet_wrap(~palm_tribe, ncol=1) +
theme_void()
# Plot waffle chart per tribe
ggplot(waffle_df, aes(fill=palm_tribe, values=n)) +
geom_waffle(color = "white", size = 1.125, n_rows = 6) +
facet_wrap(~palm_tribe, ncol=2) +
theme_void()
palms
rm(list = ls())
gc()
palms <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-18/palmtrees.csv')
View(palms)
# Prepare data for ggwaffle
waffle_df <- palms %>%
count(palm_subfamily) %>%
arrange(desc(n)) %>%
mutate(tribe = factor(palm_subfamily, levels = rev(unique(palm_subfamily)))) %>%
filter(n > 10) # Show only larger tribes for clarity
View(waffle_df)
# Prepare data for ggwaffle
waffle_df <- palms %>%
count(palm_subfamily) %>%
arrange(desc(n)) %>%
mutate(tribe = factor(palm_subfamily, levels = rev(unique(palm_subfamily))))
ggplot(waffle_df, aes(fill=palm_tribe, values=n)) +
geom_waffle(color = "white", size = 1.125, n_rows = 6) +
facet_wrap(~palm_tribe, ncol=2) +
theme_void()
ggplot(waffle_df, aes(fill=palm_subfamily, values=n)) +
geom_waffle(color = "white", size = 1.125, n_rows = 6) +
facet_wrap(~palm_subfamily, ncol=2) +
theme_void()
ggplot(waffle_df, aes(fill=palm_subfamily, values=n)) +
geom_waffle(color = "white", size = 1.125, n_rows = 6)
waffle_df
# Count the number of species per tribe
tribe_counts <- palms %>%
count(palm_tribe, name = "species_count") %>%
arrange(desc(species_count))
# Set number of columns for the waffle grid
cols <- 10
tribe_counts <- tribe_counts %>%
mutate(id = row_number(),  # Assign an ID to each tribe
row = (id - 1) %/% cols,  # Compute row number
col = (id - 1) %% cols)
ggplot(tribe_counts, aes(x = col, y = -row, fill = palm_tribe)) +
geom_tile(color = "white", size = 0.5) +
scale_fill_viridis_d(option = "D") +
coord_fixed() +
theme_void() +
facet_wrap(~palm_subfamily) +
labs(title = "Palm Species Distribution by Tribe and Subfamily",
fill = "Palm Tribe")
ggplot(tribe_counts, aes(x = col, y = -row, fill = palm_tribe)) +
geom_tile(color = "white", size = 0.5) +
scale_fill_viridis_d(option = "D") +
coord_fixed() +
theme_void()
ggplot(tribe_counts, aes(x = col, y = -row, fill = palm_tribe)) +
geom_tile(color = "white", size = 0.5) +
scale_fill_viridis_d(option = "D") +
coord_fixed() +
theme_void() +
facet_wrap(~palm_subfamily)
ggplot(tribe_counts, aes(x = col, y = -row, fill = palm_tribe)) +
geom_tile(color = "white", size = 0.5) +
scale_fill_viridis_d(option = "D") +
coord_fixed() +
theme_void()
# Create the waffle chart using ggplot2
ggplot(tribe_counts, aes(x = col, y = -row, fill = palm_tribe)) +
geom_tile(color = "white", size = 0.5) +
scale_fill_viridis_d(option = "D") +
coord_fixed() +
theme_void() +
labs(title = "Palm Species Distribution by Tribe",
fill = "Palm Tribe") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, size = 14, face = "bold"))
tribe_counts
# Prepare data for ggwaffle
waffle_df <- palms %>%
count(palm_subfamily) %>%
arrange(desc(n)) %>%
mutate(tribe = factor(palm_subfamily, levels = rev(unique(palm_subfamily))))
ggplot(waffle_df, aes(fill=palm_subfamily, values=n)) +
geom_waffle(color = "white", size = 1.125, n_rows = 6) +
facet_wrap(~palm_subfamily, ncol=2) +
theme_void()
# Prepare data: Count subfamilies per tribe
waffle_df <- palms %>%
distinct(palm_tribe, palm_subfamily) %>%  # Get unique tribe-subfamily pairs
count(palm_tribe) %>%
arrange(desc(n)) %>%
mutate(palm_tribe = factor(palm_tribe, levels = rev(unique(palm_tribe))))  # Order by count
# Define colors manually (optional)
tribe_colors <- RColorBrewer::brewer.pal(n = min(12, length(unique(waffle_df$palm_tribe))), "Paired")
# Plot
ggplot(waffle_df, aes(fill = palm_tribe, values = n)) +
geom_waffle(color = "white", size = 1, n_rows = 5) +
facet_wrap(~palm_tribe, scales = "free", ncol = 2) +
scale_fill_manual(values = tribe_colors) +  # Custom colors
theme_void() +
labs(title = "Number of Palm Subfamilies per Tribe",
fill = "Palm Tribe") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
# Define colors manually (optional)
# Create a custom palette for the tribes
tribe_colors <- scales::hue_pal()(length(unique(waffle_df$palm_tribe)))
# Plot
ggplot(waffle_df, aes(fill = palm_tribe, values = n)) +
geom_waffle(color = "white", size = 1, n_rows = 5) +
facet_wrap(~palm_tribe, scales = "free", ncol = 2) +
scale_fill_manual(values = tribe_colors) +  # Custom colors
theme_void() +
labs(title = "Number of Palm Subfamilies per Tribe",
fill = "Palm Tribe") +
theme(legend.position = "bottom",
plot.title = element_text(hjust = 0.5, face = "bold", size = 14))
View(waffle_df)
palms %>%
distinct(palm_tribe, palm_subfamily)
palms
# Prepare data for ggwaffle
waffle_df <- palms %>%
count(palm_tribe ) %>%
arrange(desc(n)) %>%
mutate(tribe = factor(palm_tribe , levels = rev(unique(palm_tribe ))))
ggplot(waffle_df, aes(fill=palm_tribe , values=n)) +
geom_waffle(color = "white", size = 1.125, n_rows = 6) +
facet_wrap(~palm_tribe , ncol=2) +
theme_void()
waffle_df
ggplot(waffle_df, aes(fill=tribe , values=n)) +
geom_waffle(color = "white", size = 1.125, n_rows = 6) +
facet_wrap(~palm_tribe , ncol=2) +
theme_void()
# Prepare data for ggwaffle
waffle_df <- palms %>%
count(palm_tribe) %>%
arrange(desc(n)) %>%
mutate(tribe = factor(palm_tribe, levels = rev(unique(palm_tribe)))) %>%
filter(n > 10) # Show only larger tribes for clarity
# Plot waffle chart per tribe
ggwaffle(waffle_df, aes(fill = tribe), rows = 10) +
scale_fill_viridis_d() +
theme_minimal() +
labs(title = "Palm Species Distribution by Tribe", fill = "Palm Tribe")
ggplot(waffle_df, aes(fill=tribe , values=n)) +
geom_waffle(color = "white", size = 1.125, n_rows = 6) +
facet_wrap(~palm_tribe , ncol=2) +
theme_void()
# Prepare data: Count subfamilies per tribe and create a combined category
waffle_df <- palms %>%
distinct(palm_tribe, palm_subfamily) %>%  # Get unique tribe-subfamily pairs
count(palm_tribe, palm_subfamily) %>%
mutate(combined_category = paste(palm_tribe, palm_subfamily, sep = " - ")) %>%
arrange(desc(n)) %>%
mutate(combined_category = factor(combined_category, levels = rev(unique(combined_category))))  # Order by count
waffle_df
rm(list = ls())
gc()
palms <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-18/palmtrees.csv')
palms$acc_genus |> unique()
palms$acc_genus |> unique() |> length()
palms$acc_species |> unique() |> length()
palms$palm_tribe |> unique() |> length()
palms$palm_subfamily |> unique() |> length()
# Prepare data for ggwaffle
waffle_df <- palms %>%
count(palm_tribe ) %>%
arrange(desc(n)) %>%
mutate(tribe = factor(palm_tribe , levels = rev(unique(palm_tribe)))) |>
filter(n > 10)
# plot ---------
# Filter data for a specific species (e.g., "Elaeis guineensis")
species_data <- palms %>%
filter(spec_name == "Elaeis guineensis")  # Replace with the species of interest
# Calculate the average fruit size (e.g., average of max_fruit_length_cm, min_fruit_length_cm, etc.)
average_fruit_size <- species_data %>%
summarise(
avg_fruit_length = mean(c(max_fruit_length_cm, min_fruit_length_cm, average_fruit_length_cm), na.rm = TRUE),
avg_fruit_width = mean(c(max_fruit_width_cm, min_fruit_width_cm, average_fruit_width_cm), na.rm = TRUE)
)
# Display the calculated average fruit sizes
print(average_fruit_size)
# Visualizing the average fruit size with a bar plot
ggplot(average_fruit_size, aes(x = "Fruit Size", y = avg_fruit_length)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(
title = "Average Fruit Size for Elaeis guineensis",
x = "Fruit Type",
y = "Average Fruit Length (cm)"
) +
theme_minimal()
View(average_fruit_size)
# plot ---------
# Filter data for a specific species (e.g., "Elaeis guineensis")
species_data <- palms %>%
filter(spec_name == "Elaeis guineensis")  # Replace with the species of interest
species_data
View(palms)
View(species_data)
palms <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2025/2025-03-18/palmtrees.csv')
# plot ---------
# Filter data for a specific species (e.g., "Elaeis guineensis")
species_data <- palms %>%
filter(spec_name == "Aiphanes")  # Replace with the species of interest
# plot ---------
# Filter data for a specific species (e.g., "Elaeis guineensis")
species_data <- palms %>%
filter(spec_genus == "Aiphanes")  # Replace with the species of interest
# plot ---------
# Filter data for a specific species (e.g., "Elaeis guineensis")
species_data <- palms %>%
filter(acc_genus == "Aiphanes")  # Replace with the species of interest
View(species_data)
# plot ---------
# Filter data for a specific species (e.g., "Elaeis guineensis")
species_data <- palms %>%
filter(acc_genus == "Eramospatha")  # Replace with the species of interest
# plot ---------
# Filter data for a specific species (e.g., "Elaeis guineensis")
species_data <- palms %>%
filter(acc_genus == "Eremospatha")  # Replace with the species of interest
palms$acc_species |> unique() |> length()
# plot ---------
# Filter data for a specific species (e.g., "Elaeis guineensis")
species_data <- palms %>%
filter(acc_genus == "Brahea")  # Replace with the species of interest
species_data
species_data
# Scatter plot for max_rachis_length_m vs max_petiole_length_m
ggplot(brahea_data, aes(x = max_rachis_length_m, y = max_petiole_length_m)) +
geom_point(aes(color = acc_species), size = 3) +  # Add color by species
labs(
title = "Comparison of Rachis and Petiole Length for Genus Brahea",
x = "Max Rachis Length (m)",
y = "Max Petiole Length (m)"
) +
theme_minimal() +
theme(legend.title = element_blank())  # Remove legend title for clarity
# plot ---------
# Filter data for a specific species (e.g., "Elaeis guineensis")
brahea_data <- palms %>%
filter(acc_genus == "Brahea")  # Replace with the species of interest
# Scatter plot for max_rachis_length_m vs max_petiole_length_m
ggplot(brahea_data, aes(x = max_rachis_length_m, y = max_petiole_length_m)) +
geom_point(aes(color = acc_species), size = 3) +  # Add color by species
labs(
title = "Comparison of Rachis and Petiole Length for Genus Brahea",
x = "Max Rachis Length (m)",
y = "Max Petiole Length (m)"
) +
theme_minimal() +
theme(legend.title = element_blank())  # Remove legend title for clarity
brahea_data
# Scatter plot for max_rachis_length_m vs max_petiole_length_m
ggplot(brahea_data, aes(x = max__rachis__length_m, y = max___petiole_length_m)) +
geom_point(aes(color = acc_species), size = 3) +  # Add color by species
labs(
title = "Comparison of Rachis and Petiole Length for Genus Brahea",
x = "Max Rachis Length (m)",
y = "Max Petiole Length (m)"
) +
theme_minimal() +
theme(legend.title = element_blank())  # Remove legend title for clarity
# Scatter plot for max_rachis_length_m vs max_petiole_length_m
ggplot(brahea_data, aes(x = max__rachis__length_m, y = max__petiole_length_m)) +
geom_point(aes(color = acc_species), size = 3) +  # Add color by species
labs(
title = "Comparison of Rachis and Petiole Length for Genus Brahea",
x = "Max Rachis Length (m)",
y = "Max Petiole Length (m)"
) +
theme_minimal() +
theme(legend.title = element_blank())  # Remove legend title for clarity
# Filter for genus Brahea
brahea_data <- species_data %>%
filter(acc_genus == "Brahea")
# Create a boxplot for max_rachis_length_m and max_petiole_length_m
ggplot(brahea_data) +
# Plot for max_rachis_length_m
geom_boxplot(aes(x = acc_species, y = max_rachis_length_m, fill = acc_species),
alpha = 0.7, color = "black") +
facet_wrap(~ acc_species) +
labs(
title = "Distribution of Max Rachis Length for Brahea Species",
x = "Species",
y = "Max Rachis Length (m)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
ggplot(brahea_data) +
# Plot for max_rachis_length_m
geom_boxplot(aes(x = acc_species, y = max__rachis__length_m, fill = acc_species),
alpha = 0.7, color = "black") +
facet_wrap(~ acc_species)
# Scatter plot for max_rachis_length_m vs max_petiole_length_m
ggplot(brahea_data, aes(x = max__rachis__length_m, y = max__petiole_length_m)) +
geom_point(aes(color = acc_species), size = 3) +  # Add color by species
labs(
title = "Comparison of Rachis and Petiole Length for Genus Brahea",
x = "Max Rachis Length (m)",
y = "Max Petiole Length (m)"
) +
theme_minimal() +
theme(legend.title = element_blank())  # Remove legend title for clarity
# Filter for genus Brahea
brahea_data <- species_data %>%
filter(acc_genus == "Brahea")
# Create a boxplot for max_rachis_length_m and max_petiole_length_m
ggplot(brahea_data) +
# Plot for max_rachis_length_m
geom_boxplot(aes(x = acc_species, y = max__rachis__length_m, fill = acc_species),
alpha = 0.7, color = "black") +
facet_wrap(~ acc_species) +
labs(
title = "Distribution of Max Rachis Length for Brahea Species",
x = "Species",
y = "Max Rachis Length (m)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Now repeat for max_petiole_length_m
ggplot(brahea_data) +
# Plot for max_petiole_length_m
geom_boxplot(aes(x = acc_species, y = max_petiole_length_m, fill = acc_species),
alpha = 0.7, color = "black") +
facet_wrap(~ acc_species) +
labs(
title = "Distribution of Max Petiole Length for Brahea Species",
x = "Species",
y = "Max Petiole Length (m)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Now repeat for max_petiole_length_m
ggplot(brahea_data) +
# Plot for max_petiole_length_m
geom_boxplot(aes(x = acc_species, y = max__petiole_length_m, fill = acc_species),
alpha = 0.7, color = "black") +
facet_wrap(~ acc_species) +
labs(
title = "Distribution of Max Petiole Length for Brahea Species",
x = "Species",
y = "Max Petiole Length (m)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
ggplot(brahea_data) +
# Plot for max_petiole_length_m
geom_boxplot(aes(x = acc_species, y = max__petiole_length_m, fill = acc_species),
alpha = 0.7, color = "black")
# Now repeat for max_petiole_length_m
ggplot(brahea_data) +
# Plot for max_petiole_length_m
geom_barplot(aes(x = acc_species, y = max__petiole_length_m, fill = acc_species),
alpha = 0.7, color = "black") +
facet_wrap(~ acc_species) +
labs(
title = "Distribution of Max Petiole Length for Brahea Species",
x = "Species",
y = "Max Petiole Length (m)"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels
# Scatter plot for max_rachis_length_m vs max_petiole_length_m
ggplot(brahea_data, aes(x = max__rachis__length_m, y = max__petiole_length_m)) +
geom_point(aes(color = acc_species), size = 3) +  # Add color by species
labs(
title = "Comparison of Rachis and Petiole Length for Genus Brahea",
x = "Max Rachis Length (m)",
y = "Max Petiole Length (m)"
) +
theme_minimal() +
theme(legend.title = element_blank())  # Remove legend title for clarity
