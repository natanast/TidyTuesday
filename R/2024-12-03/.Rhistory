library(data.table)
library(ggplot2)
A64_traffic <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-03/A64_traffic.csv')
library(sf)
sensor_sf <- st_as_sf(A64_traffic, coords = c("Longitude", "Latitude"), crs = 4326, remove = FALSE)
View(sensor_sf)
View(A64_traffic)
View(sensor_sf)
ggplot() +
geom_sf(data = england_map, fill = "lightgrey", color = "darkgrey")
ggplot() +
geom_sf(data = traffic_data, fill = "lightgrey", color = "darkgrey")
ggplot() +
geom_sf(data = sensor_sf, fill = "lightgrey", color = "darkgrey")
library(ggplot2)
library(sf)
library(rnaturalearth)
library(rnaturalearthdata)
# Get England map
england_map <- ne_states(country = "United Kingdom", returnclass = "sf") %>%
filter(admin == "England")
# Get England map
england_map <- ne_states(country = "United Kingdom", returnclass = "sf") %>%
filter(admin == "England")
# Load UK map data
uk_map <- ne_countries(scale = "medium", returnclass = "sf")
# Filter for England
england_map <- uk_map %>%
filter(sovereignt == "United Kingdom")
england_map <- uk_map[uk_map$sovereignt == "United Kingdom", ]
library(tidyverse)
# Filter for England
england_map <- uk_map |>
filter(sovereignt == "United Kingdom")
# Plot
ggplot() +
geom_sf(data = england_map, fill = "lightgrey", color = "darkgrey") +  # Add base map
geom_sf(data = sensor_sf, aes(color = `Avg mph`, size = `Total Volume`), alpha = 0.8) +  # Add sensors
scale_color_viridis_c(name = "Avg Speed (mph)", option = "plasma") +
scale_size_continuous(name = "Total Volume", range = c(2, 8)) +
labs(
title = "Traffic Flow on A64 Road in May 2021",
subtitle = "Visualizing vehicle speed and volume at sensor locations",
caption = "Data Source: National Highways API"
) +
theme_minimal()
# Plot
ggplot() +
geom_sf(data = england_map, fill = "lightgrey", color = "darkgrey")
ggplot() +
geom_sf(data = england_map, fill = "lightgrey", color = "darkgrey") +  # Add base map
geom_sf(data = sensor_sf, aes(color = `Avg mph`, size = `Total Volume`), alpha = 0.8)
# Load UK map data
uk_map <- ne_countries(scale = "medium", returnclass = "sf")
View(uk_map)
View(england_map)
# Filter for England
england_map <- uk_map |>
filter(sovereignt == "United Kingdom")
ggplot() +
geom_sf(data = england_map, fill = "lightgrey", color = "darkgrey")
View(england_map)
View(A64_traffic)
# Load UK map data
uk_map <- ne_countries(scale = "medium", returnclass = "sf")
# Filter for the United Kingdom
uk_map_filtered <- uk_map[uk_map$sovereignt == "United Kingdom", ]
# Plot the map of the United Kingdom
ggplot() +
geom_sf(data = uk_map_filtered, fill = "lightblue", color = "black") +
labs(
title = "Map of the United Kingdom",
caption = "Source: Natural Earth"
) +
theme_minimal()
# Load UK map data
uk_map <- ne_countries(scale = "medium", returnclass = "sf")
# Filter for the United Kingdom
uk_map_filtered <- uk_map[uk_map$sovereignt == "United Kingdom", ]
# Plot the map of the United Kingdom
ggplot() +
geom_sf(data = uk_map_filtered, fill = "lightblue", color = "black") +
coord_sf(xlim = c(-10, 5), ylim = c(49, 61), expand = FALSE) + # Set limits for UK
labs(
title = "Map of the United Kingdom",
caption = "Source: Natural Earth"
) +
theme_minimal()
# Load necessary libraries
library(sf)
library(ggplot2)
library(ggrepel)
library(dplyr)
library(rnaturalearth)
# Load United Kingdom map data
uk_map <- ne_countries(scale = "medium", returnclass = "sf")
# Filter for the United Kingdom
uk_map_filtered <- uk_map %>%
filter(sovereignt == "United Kingdom")
# Example point data (replace with actual data if available)
example_points <- data.frame(
name = c("London", "Edinburgh", "Cardiff", "Belfast"),
lon = c(-0.1278, -3.1883, -3.1791, -5.9301),
lat = c(51.5074, 55.9533, 51.4816, 54.5970)
) %>%
st_as_sf(coords = c("lon", "lat"), crs = 4326, remove = FALSE)
# Plot the map
ggplot() +
# Map base layer
geom_sf(data = uk_map_filtered, fill = "grey75", color = "black", linewidth = 0.1) +
# Highlight example points
geom_sf(data = example_points, size = 3, shape = 21, stroke = 1,
fill = "#9DC183", color = "#7A9A5B", alpha = 0.9) +
# Add text labels to points
ggrepel::geom_text_repel(
data = example_points,
aes(label = name, geometry = geometry),
stat = "sf_coordinates",
family = "Sofia Sans Extra Condensed",
fontface = "bold", size = 5,
color = "white", bg.color = "black", bg.r = 0.1,
seed = 42
) +
# Coordinate system focusing on the UK
coord_sf(xlim = c(-10, 5), ylim = c(49, 61), expand = FALSE) +
# Labels and aesthetics
labs(
title = "Map of the United Kingdom",
caption = "Data: Natural Earth Â· Graphic: Your Name"
) +
theme_void(base_family = "Caladea") +
theme(
plot.background = element_rect(fill = "grey20", color = NA),
plot.title = element_text(face = "bold", size = 24, color = "white",
margin = margin(20, 0, -40, 0), hjust = 0.5),
plot.caption = element_text(size = 11, color = "grey96",
margin = margin(-20, 10, 10, 0), hjust = 0.5)
)
# Load necessary libraries
library(sf)
library(ggplot2)
library(dplyr)
library(rnaturalearth)
library(readr)
# Load the United Kingdom map
uk_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(sovereignt == "United Kingdom")
# Load traffic data (replace with actual path to the CSV file)
traffic_data <- read_csv("A64_traffic.csv")
# Load the United Kingdom map
uk_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(sovereignt == "United Kingdom")
# Load traffic data (replace with actual path to the CSV file)
traffic_data <- read_csv("A64_traffic.csv")
# Convert traffic data to spatial format
traffic_sf <- traffic_data %>%
filter(Status == "Active") %>%  # Filter for active sensors
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)
# Load the United Kingdom map
uk_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(sovereignt == "United Kingdom")
traffic_data <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-03/A64_traffic.csv')
# Convert traffic data to spatial format
traffic_sf <- traffic_data %>%
filter(Status == "Active") %>%  # Filter for active sensors
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = Total.Volume, color = Avg.mph), alpha = 0.7) +
# Add labels for sensor names
ggrepel::geom_text_repel(
data = traffic_sf,
aes(label = Name, geometry = geometry),
stat = "sf_coordinates",
size = 3, color = "black",
max.overlaps = 10, seed = 42
) +
# Adjust color scale for average speed
scale_color_gradient(low = "blue", high = "red", name = "Avg Speed (mph)") +
# Adjust size scale for total volume
scale_size(range = c(2, 10), name = "Total Volume") +
# Map theme
theme_minimal() +
labs(
title = "Traffic Data in the United Kingdom",
subtitle = "Road sensor data showing total volume and average speed",
caption = "Data: A64_traffic.csv"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.position = "right"
)
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = Total.Volume, color = Avg.mph), alpha = 0.7)
View(A64_traffic)
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
# Add labels for sensor names
ggrepel::geom_text_repel(
data = traffic_sf,
aes(label = Name, geometry = geometry),
stat = "sf_coordinates",
size = 3, color = "black",
max.overlaps = 10, seed = 42
) +
# Adjust color scale for average speed
scale_color_gradient(low = "blue", high = "red", name = "Avg Speed (mph)") +
# Adjust size scale for total volume
scale_size(range = c(2, 10), name = "Total Volume") +
# Map theme
theme_minimal() +
labs(
title = "Traffic Data in the United Kingdom",
subtitle = "Road sensor data showing total volume and average speed",
caption = "Data: A64_traffic.csv"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.position = "right"
)
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
# # Add labels for sensor names
# ggrepel::geom_text_repel(
#     data = traffic_sf,
#     aes(label = Name, geometry = geometry),
#     stat = "sf_coordinates",
#     size = 3, color = "black",
#     max.overlaps = 10, seed = 42
# ) +
# Adjust color scale for average speed
scale_color_gradient(low = "blue", high = "red", name = "Avg Speed (mph)") +
# Adjust size scale for total volume
scale_size(range = c(2, 10), name = "Total Volume") +
# Map theme
theme_minimal() +
labs(
title = "Traffic Data in the United Kingdom",
subtitle = "Road sensor data showing total volume and average speed",
caption = "Data: A64_traffic.csv"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.position = "right"
)
ggplot() +
geom_sf(data = uk_map, fill = "grey85", color = "white") +
geom_sf(data = traffic_sf, aes(size = Total.Volume, color = Avg.mph), alpha = 0.7) +
coord_sf(xlim = c(-10, 2), ylim = c(49, 61)) +  # Set UK bounds
theme_minimal()
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
coord_sf(xlim = c(-10, 2), ylim = c(49, 61)) +  # Set UK bounds
theme_minimal()
rm(list = ls())
gc()
traffic_data <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-03/A64_traffic.csv')
View(traffic_data)
traffic_data$Latitude |> sum()
traffic_data$Latitude |> summary()
traffic_data$Longitude |> summary()
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
coord_sf(xlim = c(-9, -4), ylim = c(54, 55)) +  # Set UK bounds
theme_minimal()
# Load the United Kingdom map
uk_map <- ne_countries(scale = "medium", returnclass = "sf") %>%
filter(sovereignt == "United Kingdom")
# Convert traffic data to spatial format
traffic_sf <- traffic_data %>%
filter(Status == "Active") %>%  # Filter for active sensors
st_as_sf(coords = c("Longitude", "Latitude"), crs = 4326)
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
coord_sf(xlim = c(-9, -4), ylim = c(54, 55)) +  # Set UK bounds
theme_minimal()
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
coord_sf(xlim = c(-10, -3), ylim = c(53, 56)) +  # Set UK bounds
theme_minimal()
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
coord_sf(xlim = c(-10, 3), ylim = c(53, 56)) +  # Set UK bounds
theme_minimal()
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
# coord_sf(xlim = c(-10, 3), ylim = c(53, 56)) +  # Set UK bounds
theme_minimal()
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white")
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
coord_sf(xlim = c(-10, 3), ylim = c(53, 56)) +  # Set UK bounds
theme_minimal()
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
coord_sf(xlim = c(-10, 3), ylim = c(53, 56)) +  # Set UK bounds
theme_minimal() +
# Adjust color scale for average speed
scale_color_gradient(low = "blue", high = "red", name = "Avg Speed (mph)") +
# Adjust size scale for total volume
scale_size(range = c(2, 10), name = "Total Volume") +
labs(
title = "Traffic Data in the United Kingdom",
subtitle = "Road sensor data showing total volume and average speed",
caption = "Data: A64_traffic.csv"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.position = "right"
)
# Create the map
ggplot() +
# Base map of the UK
geom_sf(data = uk_map, fill = "grey85", color = "white") +
# Plot traffic sensors, size and color by total volume
geom_sf(data = traffic_sf, aes(size = `Total Volume`, color = `Avg mph`), alpha = 0.7) +
coord_sf(xlim = c(-2, 3), ylim = c(53, 56)) +  # Set UK bounds
theme_minimal() +
# Adjust color scale for average speed
scale_color_gradient(low = "blue", high = "red", name = "Avg Speed (mph)") +
# Adjust size scale for total volume
scale_size(range = c(2, 10), name = "Total Volume") +
labs(
title = "Traffic Data in the United Kingdom",
subtitle = "Road sensor data showing total volume and average speed",
caption = "Data: A64_traffic.csv"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12),
legend.position = "right"
)
# Plot the map of the United Kingdom
ggplot() +
geom_sf(data = uk_map_filtered, fill = "lightblue", color = "black") +
coord_sf(xlim = c(-10, 5), ylim = c(49, 61), expand = FALSE) + # Set limits for UK
labs(
title = "Map of the United Kingdom",
caption = "Source: Natural Earth"
) +
theme_minimal()
# Load UK map data
uk_map <- ne_countries(scale = "medium", returnclass = "sf")
# Filter for the United Kingdom
uk_map_filtered <- uk_map[uk_map$sovereignt == "United Kingdom", ]
# Plot the map of the United Kingdom
ggplot() +
geom_sf(data = uk_map_filtered, fill = "lightblue", color = "black") +
coord_sf(xlim = c(-10, 5), ylim = c(49, 61), expand = FALSE) + # Set limits for UK
labs(
title = "Map of the United Kingdom",
caption = "Source: Natural Earth"
) +
theme_minimal()
traffic_data <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-03/A64_traffic.csv')
sensor_sf <- st_as_sf(A64_traffic, coords = c("Longitude", "Latitude"), crs = 4326, remove = FALSE)
A64_traffic <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-03/A64_traffic.csv')
sensor_sf <- st_as_sf(A64_traffic, coords = c("Longitude", "Latitude"), crs = 4326, remove = FALSE)
A64_traffic <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-03/A64_traffic.csv')
library(data.table)
library(ggplot2)
A64_traffic <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-03/A64_traffic.csv')
library(reshape2)
library(ggplot2)
# Extract relevant columns for the heatmap
heatmap_data <- A64_traffic[, c("Time Interval", "0 - 10 mph", "11 - 15 mph", "16 - 20 mph",
"21 - 25 mph", "26 - 30 mph", "31 - 35 mph", "36 - 40 mph",
"41 - 45 mph", "46 - 50 mph", "51 - 55 mph", "56 - 60 mph",
"61 - 70 mph", "71 - 80 mph", "80+ mph")]
# Reshape the data for plotting
heatmap_data_long <- melt(heatmap_data, id.vars = "Time Interval",
variable.name = "Speed Category", value.name = "Count")
# Create the heatmap
ggplot(heatmap_data_long, aes(x = `Speed Category`, y = `Time Interval`, fill = Count)) +
geom_tile() +
scale_fill_viridis_c(option = "C") + # Use a visually appealing color palette
labs(title = "Heatmap of Vehicle Counts by Speed Category and Time Interval",
x = "Speed Category",
y = "Time Interval",
fill = "Count") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Round latitudes and longitudes for binning
A64_traffic$Lat_bin <- round(A64_traffic$Latitude, 2)
A64_traffic$Lon_bin <- round(A64_traffic$Longitude, 2)
# Summarize total volume for bins
heatmap_location <- aggregate(`Total Volume` ~ Lat_bin + Lon_bin, data = A64_traffic, sum)
# Create the heatmap
ggplot(heatmap_location, aes(x = Lon_bin, y = Lat_bin, fill = `Total Volume`)) +
geom_tile() +
scale_fill_viridis_c(option = "C") +
labs(title = "Heatmap of Traffic Volume by Location",
x = "Longitude (Binned)",
y = "Latitude (Binned)",
fill = "Total Volume") +
theme_minimal()
library(ggplot2)
ggplot(A64_traffic, aes(x = `Avg mph`, y = `Total Volume`)) +
geom_point(color = "purple", alpha = 0.6, size = 2) +
geom_smooth(method = "lm", color = "orange", se = FALSE) +
labs(title = "Relationship Between Average Speed and Total Volume",
x = "Average Speed (mph)",
y = "Total Traffic Volume") +
theme_minimal()
library(reshape2)
library(ggplot2)
# Summarize data by time interval and speed categories
heatmap_data <- A64_traffic[, c("Time Interval", "0 - 10 mph", "11 - 15 mph", "16 - 20 mph",
"21 - 25 mph", "26 - 30 mph", "31 - 35 mph", "36 - 40 mph",
"41 - 45 mph", "46 - 50 mph", "51 - 55 mph", "56 - 60 mph",
"61 - 70 mph", "71 - 80 mph", "80+ mph")]
# Melt the data into long format
heatmap_long <- melt(heatmap_data, id.vars = "Time Interval",
variable.name = "Speed Category",
value.name = "Volume")
# Create the heatmap
ggplot(heatmap_long, aes(x = `Speed Category`, y = `Time Interval`, fill = Volume)) +
geom_tile() +
scale_fill_gradient(low = "white", high = "blue") +
labs(title = "Heatmap of Traffic Volume by Speed Category and Time Interval",
x = "Speed Category",
y = "Time Interval",
fill = "Volume") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(A64_traffic)
rm(list = ls())
gc()
A64_traffic <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-03/A64_traffic.csv')
View(A64_traffic)
length(unique(A64_traffic$`Time Period Ending`))
length(unique(A64_traffic$`Time Interval`))
