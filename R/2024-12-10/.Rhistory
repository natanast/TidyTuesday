rm(list = ls())
gc()
library(data.table)
library(ggplot2)
library(ggplotify)
library(extrafont)
library(ggtext)
parfumo_data_clean <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-10/parfumo_data_clean.csv')
View(parfumo_data_clean)
rm(list = ls())
gc()
library(data.table)
library(ggplot2)
parfumo_data_clean <- fread('https://raw.githubusercontent.com/rfordatascience/tidytuesday/main/data/2024/2024-12-10/parfumo_data_clean.csv')
parfumo_data_clean |> head()
library(ggplot2)
library(dplyr)
# Filter for non-missing Release_Year and create a summary
perfume_year_summary <- parfumo_data_clean |>
filter(!is.na(Release_Year)) |>
group_by(Release_Year) |>
summarize(Count = n(), .groups = "drop")
# Plot the number of perfumes released per year
ggplot(perfume_year_summary, aes(x = Release_Year, y = Count)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "darkblue") +
labs(
title = "Number of Perfumes Released Over Time",
x = "Release Year",
y = "Number of Perfumes"
) +
theme_minimal()
colnames(parfumo_data_clean)
d = parfumo_data_clean[, c("Name", "Brand", "Release_Year", "Rating_Value", "Rating_Count", "Perfumers" )]
View(d)
d = d[
!is.na(Release_Year),
!is.na(Rating_Value),
!is.na(Rating_Count)
]
View(d)
d = parfumo_data_clean[, c("Name", "Brand", "Release_Year", "Rating_Value", "Rating_Count", "Perfumers" )]
d = d[
!is.na(d$Release_Year),
!is.na(d$Rating_Value),
!is.na(d$Rating_Count)
]
d <- d[!is.na(d$Release_Year) & !is.na(d$Rating_Value) & !is.na(d$Rating_Count), ]
View(d)
unique(d$Release_Year)
length(unique(d$Release_Year))
length(unique(d$Brand))
d |> head(10)
d |> head(2)
# Count perfumes by Release Year
perfume_count <- d |>
group_by(Release_Year) |>
summarize(Count = n(), .groups = "drop")
# Plot
ggplot(perfume_count, aes(x = Release_Year, y = Count)) +
geom_col(fill = "lightblue", color = "darkblue") +
labs(
title = "Number of Perfumes Released Over Time",
x = "Release Year",
y = "Number of Perfumes"
) +
theme_minimal()
# Scatter plot of Rating vs. Rating Count
ggplot(d, aes(x = Rating_Count, y = Rating_Value)) +
geom_point(alpha = 0.7, color = "purple") +
geom_smooth(method = "lm", color = "darkred", se = FALSE) +
labs(
title = "Relationship Between Ratings and Rating Counts",
x = "Number of Ratings",
y = "Rating Value"
) +
theme_minimal()
# Top 10 brands by average rating
top_brands <- d |>
group_by(Brand) |>
summarize(Average_Rating = mean(Rating_Value, na.rm = TRUE), Count = n(), .groups = "drop") |>
filter(Count > 1) |>  # Ensure brands have more than 1 perfume for meaningful averages
arrange(desc(Average_Rating)) |>
slice_head(n = 10)
# Plot
ggplot(top_brands, aes(x = reorder(Brand, Average_Rating), y = Average_Rating)) +
geom_col(fill = "gold", color = "black") +
coord_flip() +
labs(
title = "Top 10 Perfume Brands by Average Rating",
x = "Brand",
y = "Average Rating"
) +
theme_minimal()
# Top 10 perfumers by number of perfumes
top_perfumers <- d |>
group_by(Perfumers) |>
summarize(Perfume_Count = n(), .groups = "drop") |>
arrange(desc(Perfume_Count)) |>
slice_head(n = 10)
# Plot
ggplot(top_perfumers, aes(x = reorder(Perfumers, Perfume_Count), y = Perfume_Count)) +
geom_col(fill = "skyblue", color = "darkblue") +
coord_flip() +
labs(
title = "Top 10 Perfumers by Number of Perfumes",
x = "Perfumer",
y = "Number of Perfumes"
) +
theme_minimal()
# Histogram of ratings
ggplot(d, aes(x = Rating_Value)) +
geom_histogram(bins = 20, fill = "darkgreen", color = "black", alpha = 0.8) +
labs(
title = "Distribution of Perfume Ratings",
x = "Rating Value",
y = "Frequency"
) +
theme_minimal()
library(tidyr)
# Prepare data for heatmap
heatmap_data <- d |>
group_by(Brand, Release_Year) |>
summarize(Average_Rating = mean(Rating_Value, na.rm = TRUE), .groups = "drop") |>
pivot_wider(names_from = Release_Year, values_from = Average_Rating)
# Plot
library(ComplexHeatmap)
Heatmap(as.matrix(heatmap_data[,-1]),
name = "Average Rating",
row_labels = heatmap_data$Brand,
column_title = "Release Year",
row_title = "Brand",
col = colorRamp2(c(0, 10), c("white", "red")))
# Boxplot of ratings by perfumers
ggplot(d, aes(x = reorder(Perfumers, Rating_Value, median), y = Rating_Value)) +
geom_boxplot(fill = "lightcoral", color = "black") +
coord_flip() +
labs(
title = "Perfume Ratings by Perfumers",
x = "Perfumer",
y = "Rating Value"
) +
theme_minimal()
library(ggstream)
library(dplyr)
# Filter top 10 brands by total number of releases
top_10_brands <- d |>
group_by(Brand) |>
summarize(Perfume_Count = n(), .groups = "drop") |>
arrange(desc(Perfume_Count)) |>
slice_head(n = 10) |>
pull(Brand)
# Filter and prepare data for stream plot
stream_data <- d |>
filter(Brand %in% top_10_brands) |>
group_by(Release_Year, Brand) |>
summarize(Perfume_Count = n(), .groups = "drop") |>
arrange(Release_Year)
# Plot
ggplot(stream_data, aes(x = Release_Year, y = Perfume_Count, fill = Brand)) +
geom_stream() +
scale_fill_brewer(palette = "Set3") +
labs(
title = "Perfume Releases by Top 10 Brands Over Time",
x = "Release Year",
y = "Number of Perfumes",
fill = "Brand"
) +
theme_minimal()
# Prepare data for stream plot by concentration
stream_concentration <- d |>
filter(!is.na(Concentration)) |>
group_by(Release_Year, Concentration) |>
summarize(Perfume_Count = n(), .groups = "drop") |>
arrange(Release_Year)
# Prepare data for stream plot by concentration
stream_concentration <- d |>
filter(!is.na(Concentration)) |>
group_by(Release_Year, Concentration) |>
summarize(Perfume_Count = n(), .groups = "drop") |>
arrange(Release_Year)
Î´
d
parfumo_data_clean
library(ggstream)
library(dplyr)
# Calculate weighted score for each brand
top_brand_data <- d |>
filter(!is.na(Rating_Value) & !is.na(Rating_Count)) |>
group_by(Brand) |>
summarize(
Total_Rating_Value = sum(Rating_Value * Rating_Count, na.rm = TRUE),
Total_Rating_Count = sum(Rating_Count, na.rm = TRUE),
Weighted_Score = Total_Rating_Value / Total_Rating_Count,
Perfume_Count = n(),
.groups = "drop"
) |>
arrange(desc(Weighted_Score))
# Identify the top brand
top_brand <- top_brand_data |> slice_head(n = 1) |> pull(Brand)
# Prepare data for the stream plot for the top brand
stream_top_brand <- d |>
filter(Brand == top_brand) |>
group_by(Release_Year) |>
summarize(Perfume_Count = n(), .groups = "drop") |>
arrange(Release_Year)
# Plot for the top brand
ggplot(stream_top_brand, aes(x = Release_Year, y = Perfume_Count, fill = as.factor(Release_Year))) +
geom_stream(type = "ridge") +
scale_fill_viridis_d(option = "C") +
labs(
title = paste("Perfume Releases Over Time for Top Brand:", top_brand),
x = "Release Year",
y = "Number of Perfumes",
fill = "Year"
) +
theme_minimal()
library(ggstream)
library(dplyr)
# Calculate weighted score for each brand
top_brand_data <- d |>
filter(!is.na(Rating_Value) & !is.na(Rating_Count)) |>
group_by(Brand) |>
summarize(
Total_Rating_Value = sum(Rating_Value * Rating_Count, na.rm = TRUE),
Total_Rating_Count = sum(Rating_Count, na.rm = TRUE),
Weighted_Score = Total_Rating_Value / Total_Rating_Count,
Perfume_Count = n(),
.groups = "drop"
) |>
arrange(desc(Weighted_Score))
# Identify the top brand
top_brand <- top_brand_data |> slice_head(n = 1) |> pull(Brand)
# Prepare data for the stream plot for the top brand
stream_top_brand <- d |>
filter(Brand == top_brand) |>
group_by(Release_Year) |>
summarize(Perfume_Count = n(), .groups = "drop") |>
arrange(Release_Year)
# Plot for the top brand
ggplot(stream_top_brand, aes(x = Release_Year, y = Perfume_Count, fill = as.factor(Release_Year))) +
geom_stream(type = "ridge") +
scale_fill_viridis_d(option = "C") +
labs(
title = paste("Perfume Releases Over Time for Top Brand:", top_brand),
x = "Release Year",
y = "Number of Perfumes",
fill = "Year"
) +
theme_minimal()
top_brand_data <- d |>
filter(!is.na(Rating_Value) & !is.na(Rating_Count)) |>
group_by(Brand) |>
summarize(
Total_Rating_Value = sum(Rating_Value * Rating_Count, na.rm = TRUE),
Total_Rating_Count = sum(Rating_Count, na.rm = TRUE),
Weighted_Score = Total_Rating_Value / Total_Rating_Count,
Perfume_Count = n(),
.groups = "drop"
) |>
arrange(desc(Weighted_Score))
# Identify the top brand
top_brand <- top_brand_data |> slice_head(n = 1) |> pull(Brand)
d |>
filter(!is.na(Rating_Value) & !is.na(Rating_Count))
d |>
filter(!is.na(Rating_Value) & !is.na(Rating_Count)) |>
group_by(Brand)
Total_Rating_Value = sum(Rating_Value * Rating_Count, na.rm = TRUE)
top_brand_data <- d |>
filter(!is.na(Rating_Value) & !is.na(Rating_Count)) |>
group_by(Brand) |>
summarize(
Total_Rating_Value = sum(Rating_Value * Rating_Count, na.rm = TRUE),
Total_Rating_Count = sum(Rating_Count, na.rm = TRUE),
Weighted_Score = Total_Rating_Value / Total_Rating_Count,
Perfume_Count = n(),
.groups = "drop"
) |>
arrange(desc(Weighted_Score))
View(top_brand_data)
